import React, { useState, useEffect } from 'react';
import { TouchableOpacity, Text, StyleSheet, View, Share, Linking, ImageBackground } from 'react-native';
import { updateFavoritesStorage, getFavoriteStatusFromStorage } from './favoritesStorage';
import AsyncStorage from '@react-native-async-storage/async-storage';

const ButtonFavorite = () => {
  const [selectedItem, setSelectedItem] = useState(null);
  const [favorites, setFavorites] = useState([]);
  const [favoritePlaces, setFavoritePlaces] = useState([]); // –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –æ—Ç–¥–µ–ª–µ–Ω —Å–ø–∏—Å—ä–∫ –∑–∞ –ª—é–±–∏–º–∏—Ç–µ –º–µ—Å—Ç–∞

  const places = [
    { title: '–†–∞–∑–≥–ª–µ–¥–∞–π—Ç–µ –ë–µ–ª–æ–≥—Ä–∞–¥—á–∏—à–∫–∏—Ç–µ —Å–∫–∞–ª–∏ –∏ —Ç—è—Ö–Ω–∞—Ç–∞ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è!', url: 'https://drumivdumi.com/–±–µ–ª–æ–≥—Ä–∞–¥—á–∏—à–∫–∏-—Å–∫–∞–ª–∏/', itemId: '1' },
    { title: '–ü–µ—â–µ—Ä–∞ –ú–∞–≥—É—Ä–∞—Ç–∞ 2608 –ú.', url: 'https://www.btsbg.org/100nto/peshchera-magurata-2608-m', itemId: '2' },
    { title: '–ü–µ—â–µ—Ä–∞ –í–µ–Ω–µ—Ü–∞', url: 'https://visitbelogradchik.com/destination-item/%D0%BF%D0%B5%D1%89%D0%B5%D1%80%D0%B0-%D0%B2%D0%B5%D0%BD%D0%B5%D1%86%D0%B0/', itemId: '3' }
  ];

  useEffect(() => {
    const loadFavorites = async () => {
      const savedFavorites = await AsyncStorage.getItem('favorites');
      setFavorites(JSON.parse(savedFavorites) || []);
    };

    loadFavorites();
    setFavoritePlaces(places.filter(place => favorites.includes(place.itemId))); // –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –ª—é–±–∏–º–∏—Ç–µ –º–µ—Å—Ç–∞

    const generateRandomIndex = () => {
      return Math.floor(Math.random() * places.length);
    };

    const interval = setInterval(() => {
      const newIndex = generateRandomIndex();
      const newPlaces = [...places];
      const newLink = { 
        title: `–õ–µ–≥–µ–Ω–¥–∏ –∑–∞ –ë–µ–ª–æ–≥—Ä–∞–¥—á–∏—à–∫–∏—Ç–µ —Å–∫–∞–ª–∏`, 
        url: `https://bgnasledstvo.org/bg/%D0%BB%D0%B5%D0%B3%D0%B5%D0%BD%D0%B4%D0%B8-%D0%B7%D0%B0-%D0%B1%D0%B5%D0%BB%D0%BE%D0%B3%D1%80%D0%B0%D0%B4%D1%87%D0%B8%D1%88%D0%BA%D0%B8%D1%82%D0%B5-%D1%81%D0%BA%D0%B0%D0%BB%D0%B8/`, 
        itemId: newIndex + 1 
      };
      newPlaces.splice(newIndex, 1, newLink);
      setPlaces(newPlaces);
    }, 30 * 60 * 1000);
  
    return () => clearInterval(interval);
  }, []);

  const toggleFavorite = async () => {
    if (!selectedItem) return;

    const newStatus = !selectedItem.isFavorite;
    setSelectedItem({ ...selectedItem, isFavorite: newStatus });

    if (newStatus) {
      setFavorites([...favorites, selectedItem.itemId]);
      setFavoritePlaces([...favoritePlaces, selectedItem]); // –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –Ω–æ–≤–æ—Ç–æ –ª—é–±–∏–º–æ –º—è—Å—Ç–æ –∫—ä–º —Å–ø–∏—Å—ä–∫–∞ —Å –ª—é–±–∏–º–∏—Ç–µ –º–µ—Å—Ç–∞
    } else {
      setFavorites(favorites.filter(itemId => itemId !== selectedItem.itemId));
      setFavoritePlaces(favoritePlaces.filter(place => place.itemId !== selectedItem.itemId)); // –ü—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –ª—é–±–∏–º–æ—Ç–æ –º—è—Å—Ç–æ –æ—Ç —Å–ø–∏—Å—ä–∫–∞ —Å –ª—é–±–∏–º–∏—Ç–µ –º–µ—Å—Ç–∞
    }

    await updateFavoritesStorage(selectedItem.itemId, newStatus);
  };

  const openLink = async () => {
    if (!selectedItem || !selectedItem.url) {
      alert("–ú–æ–ª—è, –∏–∑–±–µ—Ä–µ—Ç–µ –º—è—Å—Ç–æ —Å –≤–∞–ª–∏–¥–µ–Ω URL –∞–¥—Ä–µ—Å.");
      return;
    }
  
    console.log("URL –∞–¥—Ä–µ—Å—ä—Ç –∑–∞ –æ—Ç–≤–∞—Ä—è–Ω–µ:", selectedItem.url);
  
    try {
      await Linking.openURL(selectedItem.url);
    } catch (error) {
      console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ –ª–∏–Ω–∫', error);
      alert('–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ—Ç–≤–∞—Ä—è–Ω–µ—Ç–æ –Ω–∞ –ª–∏–Ω–∫–∞.');
    }
  };

  const shareFavorite = async () => {
    if (!selectedItem) {
      alert("–ú–æ–ª—è, –∏–∑–±–µ—Ä–µ—Ç–µ –º—è—Å—Ç–æ –∑–∞ —Å–ø–æ–¥–µ–ª—è–Ω–µ.");
      return;
    }
  
    try {
      await Share.share({
        message: `–†–∞–∑–≥–ª–µ–¥–∞–π—Ç–µ ${selectedItem.title} –Ω–∞ ${selectedItem.url}`,
      });
    } catch (error) {
      console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–ø–æ–¥–µ–ª—è–Ω–µ', error);
    }
  };

  return (
    <ImageBackground source={require('./assets/5.jpg')} style={styles.backgroundImage}>
      <View style={styles.container}>
        {places.map(place => (
          <TouchableOpacity key={place.itemId} onPress={() => setSelectedItem(place)} style={styles.placeButton}>
            <Text style={[styles.buttonText, { color: selectedItem && selectedItem.itemId === place.itemId ? 'red' : 'white' }]}>
              {place.title} {favorites.includes(place.itemId) ? '‚ù§Ô∏è' : 'ü§ç'}
            </Text>
          </TouchableOpacity>
        ))}
        {selectedItem && (
          <View>
            <TouchableOpacity onPress={openLink} style={styles.button}>
              <Text style={styles.buttonText}>–û—Ç–≤–æ—Ä–∏ ‚û°Ô∏è</Text>
            </TouchableOpacity>
            
            <TouchableOpacity onPress={toggleFavorite} style={styles.button}>
              <Text style={styles.buttonText}>{selectedItem.isFavorite ? '–ü—Äe–º–∞—Ö–Ω–∏ –æ—Ç –õ—é–±–∏–º–∏' : '–î–æ–±–∞–≤–∏ –≤ –õ—é–±–∏–º–∏'}</Text>
            </TouchableOpacity>
            
            <TouchableOpacity onPress={shareFavorite} style={styles.button}>
              <Text style={styles.buttonText}>–°–ø–æ–¥–µ–ª–∏ ‚û°Ô∏è</Text>
            </TouchableOpacity>
          </View>
        )}
      </View>
    </ImageBackground>
  );
};

const styles = StyleSheet.create({
  backgroundImage: {
    flex: 1,
    width: '100%',
    height: '100%',
  },
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  placeButton: {
    marginVertical: 10,
  },
  buttonText: {
    fontSize: 16,
    textAlign: 'center',
  },
  button: {
    backgroundColor: 'green',
    borderRadius: 20,
    marginVertical: 10,
    padding: 10,
  },
});

export default ButtonFavorite;
